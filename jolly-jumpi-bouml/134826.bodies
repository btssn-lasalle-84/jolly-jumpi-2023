class IHM
!!!134826.cpp!!!	instancierWidgets() : void
    ui->setupUi(this);

    for(int i = 0; i < NB_CHEVAUX_MAX; i++)
    {
        imageAvatarsJoueurs.push_back(
          new QPixmap("../Images/cheval" + QString::number(i + 1) + ".png"));
        avatarsJoueurs.push_back(new QLabel(this));
    }
!!!134954.cpp!!!	initialiserWidgets() : void
    for(int i = 0; i < imageAvatarsJoueurs.size(); i++)
    {
        *imageAvatarsJoueurs[i] = imageAvatarsJoueurs[i]->scaled(
          QSize(qApp->desktop()->availableGeometry(this).width() * 0.1,
                qApp->desktop()->availableGeometry(this).height() * 0.1));
        avatarsJoueurs[i]->setPixmap(*imageAvatarsJoueurs[i]);

        ui->pages->widget(IHM::Page::Course)
          ->findChild<QGridLayout*>("gridLayout")
          ->addWidget(avatarsJoueurs[i], i, 0, Qt::AlignTop);

        ui->pages->widget(IHM::Page::Course)
          ->findChild<QGridLayout*>("gridLayout")
          ->setRowStretch(imageAvatarsJoueurs.size(), 1);
    }

    for(int i = 0; i < DISTANCE_MAX; i++)
    {
        ui->pages->widget(IHM::Page::Course)
          ->findChild<QGridLayout*>("gridLayout")
          ->setColumnStretch(i, 1);
    }
!!!135082.cpp!!!	positionnerWidgets() : void
    ui->pages->widget(IHM::Page::Course)
      ->findChild<QGridLayout*>("gridLayout")
      ->setContentsMargins(0,
                           qApp->desktop()->availableGeometry(this).height() *
                             0.14,
                           0,
                           0);
!!!135338.cpp!!!	initialiserFenetre() : void
#ifdef RASPBERRY_PI
    showFullScreen();
#else
    setFixedSize(qApp->desktop()->availableGeometry(this).width(),
                 qApp->desktop()->availableGeometry(this).height());
    // showMaximized();
#endif

    afficherPageConnexion();
!!!142890.cpp!!!	estPartieFinie() : bool
    for(int i = 0; i < nbChevaux; i++)
    {
        if(positionChevaux[i] == DISTANCE_MAX)
        {
            qDebug() << Q_FUNC_INFO << "true";
            return true;
        }
    }
    qDebug() << Q_FUNC_INFO << "false";
    return false;
!!!143018.cpp!!!	installerModeSimulation() : void
    QAction* actionAvancementCheval = new QAction(this);
    actionAvancementCheval->setShortcut(QKeySequence(Qt::Key_Right));
    addAction(actionAvancementCheval);
    connect(actionAvancementCheval,
            SIGNAL(triggered()),
            this,
            SLOT(simulerAvancementCheval()));
!!!143146.cpp!!!	randInt(in min : int, in max : int) : int
    return qrand() % ((max + 1) - min) + min;
!!!135466.cpp!!!	afficherPage(in page : IHM::Page) : void
    ui->pages->setCurrentIndex(page);
!!!135594.cpp!!!	afficherPageConnexion() : void
    afficherPage(IHM::Page::Connexion);
!!!135722.cpp!!!	afficherPageCourse() : void
    afficherPage(IHM::Page::Course);
!!!143274.cpp!!!	actualiserPositionChevaux(in numeroCheval : int, in deplacement : IHM::Trou) : void
    qDebug() << Q_FUNC_INFO << "numeroCheval" << numeroCheval << "deplacement"
             << int(deplacement);
    positionChevaux[numeroCheval] =
      positionChevaux[numeroCheval] + int(deplacement);
    if(positionChevaux[numeroCheval] > DISTANCE_MAX)
        positionChevaux[numeroCheval] = DISTANCE_MAX;
    avancerChevaux();
!!!143402.cpp!!!	avancerChevaux() : void
    for(int i = 0; i < nbChevaux; i++)
    {
        avatarsJoueurs[i]->setPixmap(*imageAvatarsJoueurs[i]);
        ui->pages->widget(IHM::Page::Course)
          ->findChild<QGridLayout*>("gridLayout")
          ->removeWidget(avatarsJoueurs[i]);

        ui->pages->widget(IHM::Page::Course)
          ->findChild<QGridLayout*>("gridLayout")
          ->addWidget(avatarsJoueurs[i], i, positionChevaux[i], Qt::AlignTop);

        ui->pages->widget(IHM::Page::Course)
          ->findChild<QGridLayout*>("gridLayout")
          ->setRowStretch(imageAvatarsJoueurs.size(), 1);
    }
!!!143530.cpp!!!	simulerAvancementCheval() : void
    Trou trous[NB_COULEURS_TROU] = { JAUNE, BLEU, ROUGE };
    int  numeroCheval            = randInt(0, NB_CHEVAUX_MAX - 1);
    int  trou                    = randInt(0, NB_COULEURS_TROU - 1);
    actualiserPositionChevaux(numeroCheval, trous[trou]);
!!!135850.cpp!!!	IHM(inout parent : QWidget = nullptr)
    qDebug() << Q_FUNC_INFO << "nbChevaux" << nbChevaux;

    instancierWidgets();
    initialiserWidgets();
    positionnerWidgets();
    connecterSignauxSlots();
    initialiserFenetre();
#ifdef MODE_SIMULATION
    installerModeSimulation();
#endif
    afficherPageCourse();
!!!135978.cpp!!!	~IHM()
    delete ui;
